<?xml version="1.0" encoding="utf-8" ?>
<chapter id="devel">
    <title>Dla developerów</title>
     <sect1 id="database">
        <title>Baza danych</title>
	<para>
        Ten rozdział opisuje strukturę bazy MySQL. Przedstawiono w nim schemat poszczególnych tabel.
        Opis każdej tabeli składa się z siedmiu kolumn. Znaczenie poszczególnych kolumn to:
		<orderedlist>
			<listitem><para>Nazwa pola</para></listitem>
			<listitem><para>Typ przechowywanych danych</para></listitem>
			<listitem><para>Wartość logiczna określająca, czy dane pole w tabeli może przechowywać wartość niezdefiniowaną (null).</para></listitem>
			<listitem><para>Typ klucza. Może przyjmować jedną z wartości:
				<itemizedlist>
					<listitem><para>PRI - oznacza, że kolumna to klucz podstawowy</para></listitem>
					<listitem><para>MUL - ???</para></listitem>
					<listitem><para>UNI - oznacza, że wartość przechowywana w tym polu jest unikalna dla całej tabeli</para></listitem>
				</itemizedlist></para></listitem>
			<listitem><para>Wartość domyślna jaką przyjmie baza danych w przypadku kiedy nie zostanie podana żadna wartość. Znak myślnika oznacza, że pole nie ma zdefiniowanej domyślnej wartości.</para></listitem>
			<listitem><para>Określa dodatkowe właściwości pola. Może przyjmować jedną z wartości:
				<itemizedlist>
					<listitem><para>auto_increment - oznacza, że kolejno dodawane rekordy będą automatycznie inkrementowane</para></listitem>
				</itemizedlist></para></listitem>
			<listitem><para>Dodatkowe informacje dotyczące danego pola</para></listitem>
		</orderedlist>
        Schemat bazy danych nie zawiera pól typu <code>DATETIME</code>. Daty są przechowywane w formacie timestamp<footnote id="timestamp"><para>
        Przechowywanie daty w formacie timestamp polega na zapisaniu liczby sekund
        od daty 1/01/1970, czyli od momentu początku epoki unixa.
    </para></footnote> w polu o typie <code>INT</code>. 
    </para>
		<table><title>Spis tabel</title>
			<tgroup cols='2' align='left' colsep='1' rowsep='1'>
				<colspec colname='Nazwa'/>
				<colspec colname='Opis'/>
				<thead>
					<row>
						<entry>Nazwa</entry>
						<entry>Opis</entry>
					</row>
				</thead>
				<tbody>
					<row><entry>interfaces</entry><entry>Zawiera dane interfejsów (wejść i wyjść)</entry></row>
					<row><entry>logs</entry><entry>Zawiera logi systemowe</entry></row>
					<row><entry>settings</entry><entry>Zawiera podstawowe ustawienia systemowe.</entry></row>
					<row><entry>stats</entry><entry>Zawiera statystyki (dane odczytane z czujników)</entry></row>
					<row><entry>timers</entry><entry>Zawiera spis timerów (zdarzeń)</entry></row>
					<row><entry>units</entry><entry>Zawiera jednostki miar (używane tylko w UI)</entry></row>	
					<row><entry>alarms</entry><entry>Zawiera spis alarmów</entry></row>	
					<row><entry>water</entry><entry>Zawiera pomiary wody robione poza AaquaPi (np. testami kropelkowymi - używane tylko w UI)</entry></row>	
				</tbody>
			</tgroup>
		</table>

&db-struct;
     </sect1>
     <sect1 id="daemon">
          <title>Demon</title>
          <para>Stałe demona:</para>	
<programlisting>
//prefiksy portów wej/wyj
const char *PORT_RELBRD_PREFIX = "relbrd:"; // to jest do usunięcia - brak wsparcia
const char *PORT_RPI_GPIO_PREFIX = "rpi:gpio:";
const char *PORT_RPI_1W_PREFIX = "rpi:1w:";
const char *PORT_RPI_I2C_MINIPH_PREFIX = "rpi:i2c:miniph:";
const char *PORT_RPI_I2C_ADS1115_PREFIX = "rpi:i2c:ads1115:";
const char *PORT_DUMMY_PREFIX = "dummy:";
const char *PORT_TEXT_FILE_PREFIX = "rpi:system:txtfile:";

//prefiksy portów wejściowych
const char *INPUT_RPI_1W_PREFIX = "rpi:1w:";
const char *INPUT_DUMMY_PREFIX = "dummy:";
const char *INPUT_RPI_I2C_MINIPH_PREFIX = "rpi:i2c:miniph";
const char *INPUT_RPI_I2C_ADS1115_PREFIX = "rpi:i2c:ads1115:";

const int E_DEV  = -1;
const int E_INFO = 0;
const int E_WARN = 1;
const int E_CRIT = 2;
const int E_SQL  = 3;

// typ urządzenia
const int DEV_INPUT = 1;
const int DEV_OUTPUT = 2;
const int DEV_OUTPUT_PWM = 3;

</programlisting>
          <para>Definicje struktur:</para>	
<programlisting>
struct _interfaces {
	int id;
	char address[128];
	char name[30];
	int type;
	int state;
	int new_state;
	int draw;
	double measured_value;
	double raw_measured_value;
	int override_value;
	int override_expire;
	int was_error_last_time;
	int service_val;
	int dashboard;
	double conf;
} interfaces[100];

struct _timers {
	int id;
	int timeif;
	int action;
	int interfaceidthen;
	char days[7]; 
} timers[100];

typedef struct
{
	char* db_host;
	char* db_user; 
	char* db_password;
	char* db_database;
	int dontfork;
	int stat_freq;
	int inputs_freq;
	int devel_freq;
	int reload_freq;
	int bind_port;
	char* bind_address;
} configuration;

</programlisting>
    </sect1>
    <sect1 id="i2c_dev">
        <title>Urządzenia I2C</title>
        <para>Daemon skanuje szynę I2C, i w momencie wykrycia pod danym adresem podpiętego urządzenia, zakłada że takie urządzenie jest do niego podpięte, i umożliwi nim sterowanie.
			Nie ma możliwości weryfikacji czy podpięte jest dobre urządzenie, rozpoznawanie typu nastepuje tylko po adresie.</para>	
		<table><title>Spis obsługiwanych podzespołów na I2C wraz z rezerwacją adresów</title>
			<tgroup cols='3' align='left' colsep='1' rowsep='1'>
				<colspec colname='Adres'/>
				<colspec colname='Urządzenie'/>
				<colspec colname='Opis'/>
				<thead>
					<row>
						<entry>Adres</entry>
						<entry>Urządzenie</entry>
						<entry>Opis</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>0x20</entry>
						<entry>PCF8574</entry>
						<entry>Ekspander wyprowadzeń I2C, z 8 portami we/wy</entry>
					</row>
					<row>
						<entry>0x21</entry>
						<entry>PCF8574</entry>
						<entry>Ekspander wyprowadzeń I2C, z 8 portami we/wy</entry>
					</row>
					<row>
						<entry>0x22</entry>
						<entry>PCF8574</entry>
						<entry>Ekspander wyprowadzeń I2C, z 8 portami we/wy</entry>
					</row>
					<row>
						<entry>0x23</entry>
						<entry>PCF8574</entry>
						<entry>Ekspander wyprowadzeń I2C, z 8 portami we/wy</entry>
					</row>
					<row>
						<entry>0x48</entry>
						<entry>ADS1115</entry>
						<entry>Przetwornik ADC 16-bitowy 4-kanałowy I2C z programowym wzmocnieniem</entry>
					</row>					<row>
						<entry>0x49</entry>
						<entry>ADS1115</entry>
						<entry>Przetwornik ADC 16-bitowy 4-kanałowy I2C z programowym wzmocnieniem</entry>
					</row>					<row>
						<entry>0x4A</entry>
						<entry>ADS1115</entry>
						<entry>Przetwornik ADC 16-bitowy 4-kanałowy I2C z programowym wzmocnieniem</entry>
					</row>					<row>
						<entry>0x4B</entry>
						<entry>ADS1115</entry>
						<entry>Przetwornik ADC 16-bitowy 4-kanałowy I2C z programowym wzmocnieniem</entry>
					</row>
					<row>
						<entry>0x4D</entry>
						<entry>MiniPH</entry>
						<entry>Mostek pomiarowy pH od Sparky's Widgets</entry>
					</row>						
				</tbody>
			</tgroup>
		</table>			
	</sect1>
</chapter>
